---
alwaysApply: true
---
---
description: How to add or edit Cursor rules in our project
globs:
alwaysApply: false
---
# Cursor Rules Location


How to add new cursor rules to the project


1. Always place rule files in PROJECT_ROOT/.cursor/rules/:
    ```
    .cursor/rules/
    ├── your-rule-name.mdc
    ├── another-rule.mdc
    └── ...
    ```


2. Follow the naming convention:
    - Use kebab-case for filenames
    - Always use .mdc extension
    - Make names descriptive of the rule's purpose


3. Directory structure:
    ```
    PROJECT_ROOT/
    ├── .cursor/
    │   └── rules/
    │       ├── your-rule-name.mdc
    │       └── ...
    └── ...
    ```


4. Never place rule files:
    - In the project root
    - In subdirectories outside .cursor/rules
    - In any other location


5. Cursor rules have the following structure:


```
---
description: Short description of the rule's purpose
globs: optional/path/pattern/**/*
alwaysApply: false
---
# Rule Title


Main content explaining the rule with markdown formatting.


1. Step-by-step instructions
2. Code examples
3. Guidelines


Example:


```typescript
// Good example
function goodExample() {
  // Implementation following guidelines
}


// Bad example
function badExample() {
  // Implementation not following guidelines
}
```


## GitHub Repository Pattern

This project follows a specific GitHub repository structure:

**Repository URL Pattern:**
- Base URL: `https://github.com/douglasearp/`
- Repository Name: `{ProjectFolderName}`
- Full URL: `https://github.com/douglasearp/{ProjectFolderName}`

**Examples:**
- DemoPayOnwardAuth: `https://github.com/douglasearp/DemoPayOnwardAuth`
- testdeeppowder: `https://github.com/douglasearp/testdeeppowder`
- cuautomate: `https://github.com/douglasearp/cuautomate`
- EmbedAR: `https://github.com/douglasearp/EmbedAR`

**Repository Naming Convention:**
- Use PascalCase for project names
- Keep names descriptive and concise
- Avoid special characters or spaces
- Use consistent naming across all repositories

**GitHub Integration:**
- All repositories are under the `douglasearp` organization
- Use proper commit messages following conventional commits
- Maintain consistent README structure across repositories
- Follow the same development workflow for all projects
